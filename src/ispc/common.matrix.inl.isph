// ---------------------------------------------------------------------------------------------------------------------
// Tether-ISPC by Harry Denholm, ishani.org 2020
// https://github.com/ishani/Tether-ISPC
// ---------------------------------------------------------------------------------------------------------------------
// matrix manipulation functions
//
// includes reference from https://github.com/zigguratvertigo/hlsl-to-ispc
// Copyright (c) 2017 Colin Barre-Brisebois
//

#if !defined( _tether_decl )
#error this inl file should only be included via common.isph
#endif


// ---------------------------------------------------------------------------------------------------------------------

#if _TETHER_ARG_1

_tether_decl float determinant( _tether_arg1(float2x2) m)
{
    return m.row[0][0] * m.row[1][1] - m.row[1][0] * m.row[0][1];
}

_tether_decl float determinant( _tether_arg1(float3x3) m)
{
    return   m.row[0][0] * ( m.row[1][1] * m.row[2][2] - m.row[2][1] * m.row[1][2] )
           - m.row[1][0] * ( m.row[0][1] * m.row[2][2] - m.row[2][1] * m.row[0][2] )
           + m.row[2][0] * ( m.row[0][1] * m.row[1][2] - m.row[1][1] * m.row[0][2] );
}

_tether_decl float2x2 transpose( _tether_arg1(float2x2) m)
{
    _tether_var float2x2 r;
    r.row[0][0] = m.row[0][0];
    r.row[0][1] = m.row[1][0];
    r.row[1][0] = m.row[0][1];
    r.row[1][1] = m.row[1][1];
    return r;
}

_tether_decl float3x3 transpose( _tether_arg1(float3x3) m)
{
    _tether_var float3x3 r;
    r.row[0][0] = m.row[0][0];
    r.row[0][1] = m.row[1][0];
    r.row[0][2] = m.row[2][0];
    r.row[1][0] = m.row[0][1];
    r.row[1][1] = m.row[1][1];
    r.row[1][2] = m.row[2][1];
    r.row[2][0] = m.row[0][2];
    r.row[2][1] = m.row[1][2];
    r.row[2][2] = m.row[2][2];
    return r;
}

_tether_decl float4x4 transpose( _tether_arg1(float4x4) m)
{
    _tether_var float4x4 r;
    r.row[0][0] = m.row[0][0];
    r.row[0][1] = m.row[1][0];
    r.row[0][2] = m.row[2][0];
    r.row[0][3] = m.row[3][0];
    r.row[1][0] = m.row[0][1];
    r.row[1][1] = m.row[1][1];
    r.row[1][2] = m.row[2][1];
    r.row[1][3] = m.row[3][1];
    r.row[2][0] = m.row[0][2];
    r.row[2][1] = m.row[1][2];
    r.row[2][2] = m.row[2][2];
    r.row[2][3] = m.row[3][2];
    r.row[3][0] = m.row[0][3];
    r.row[3][1] = m.row[1][3];
    r.row[3][2] = m.row[2][3];
    r.row[3][3] = m.row[3][3];
    return r;
}

#endif // _TETHER_ARG_1

#if _TETHER_ARG_2

// post-multiply
_tether_decl float3 mul( _tether_arg1(float3x3) a, _tether_arg2(float3) b )
{
    ispc_construct( _tether_var float3 r, {
        ( a.row[0].x * b.x ) + ( a.row[0].y * b.y ) + ( a.row[0].z * b.z ),
        ( a.row[1].x * b.x ) + ( a.row[1].y * b.y ) + ( a.row[1].z * b.z ),
        ( a.row[2].x * b.x ) + ( a.row[2].y * b.y ) + ( a.row[2].z * b.z )
    });
    return r;
}

// pre-multiply
_tether_decl float3 mul( _tether_arg1(float3) a, _tether_arg2(float3x3) b )
{
    ispc_construct( _tether_var float3 r, {
        ( a.x * b.row[0].x ) + ( a.y * b.row[1].x ) + ( a.z * b.row[2].x ),
        ( a.x * b.row[0].y ) + ( a.y * b.row[1].y ) + ( a.z * b.row[2].y ),
        ( a.x * b.row[0].z ) + ( a.y * b.row[1].z ) + ( a.z * b.row[2].z )
    });
    return r;
}

#endif // _TETHER_ARG_2
