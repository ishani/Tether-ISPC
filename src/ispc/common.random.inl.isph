// ---------------------------------------------------------------------------------------------------------------------
// Tether-ISPC by Harry Denholm, ishani.org 2020
// https://github.com/ishani/Tether-ISPC
// ---------------------------------------------------------------------------------------------------------------------
// 
//

#if !defined( _tether_decl )
#error this inl file should only be included via common.isph
#endif


#if _TETHER_ARG_1

// ---------------------------------------------------------------------------------------------------------------------

_tether_decl uint32_t rngScramble32( _tether_arg1(uint) value1, uniform const uint32_t value2 = 0x85ebca6b )
{
    _tether_var uint32_t v1  = value1 * 0xcc9e2d51;
                         v1  = (v1 >> 17) | (v1 << (32 - 17));
                         v1 *= 0x1b873593;

    _tether_var uint32_t v2 = value2 ^ v1;
                         v2 = (v2 >> 19) | (v2 << (32 - 19));

    return v2 * 5 + 0xe6546b64;
}

_tether_decl float rngFloat( _tether_arg1(uint) rng )
{
    return (float)( (double)rng * (1.0 / 4294967295.0) ); // 1.0 / (2^32-1)
}


// ---------------------------------------------------------------------------------------------------------------------
// barrel rotation of u32/64 left or right

// barrel rotate right 32b
_tether_decl uint rotateR32( _tether_arg1(uint) value, uniform const int _shift )
{
    if ( _shift == 0 )
        return value;

    return ( value >> _shift ) | ( value << ( 32 - _shift ) );
}

// .. and left
_tether_decl uint rotateL32( _tether_arg1(uint) value, uniform const int _shift )
{
    return ( value << _shift ) | ( value >> ( 32 - _shift ) );
}

// barrel rotate right 64b
_tether_decl uint64 rotateR64( _tether_arg1(uint64) value64, uniform const int _shift )
{
    if ( _shift == 0 )
        return value64;

    return ( value64 >> _shift ) | ( value64 << ( 64 - _shift ) );
}

_tether_decl uint64 rotateL64( _tether_arg1(uint64) value64, uniform const int _shift )
{
    if ( _shift == 0 )
        return value64;

    return ( value64 << _shift ) | ( value64 >> ( 64 - _shift ) );
}

#endif // _TETHER_ARG_1

#if _TETHER_ARG_2

// ---------------------------------------------------------------------------------------------------------------------
// mix two u32/u64 down to one

// U32, U32 -> hashed U32
_tether_decl uint crushU32( _tether_arg1(uint) value1, _tether_arg2(uint) value2, uniform const uint key = 0xe6546b64 )
{
    _tether_var uint v1 = value1 * 0xcc9e2d51;
    v1 = rotateR32( v1, 17 );
    v1 *= 0x1b873593;

    _tether_var uint v2 = value2 ^ v1;
    v2 = rotateR32( v2, 19 );
    return v2 * 5 + key;
}

// U64, U64 -> hashed U64
_tether_decl uint64 crushU64( _tether_arg1(uint64) value1, _tether_arg2(uint64) value2, uniform const uint64 key = 0x9ddfea08eb382d69UL )
{
    // Murmur-inspired hashing
    _tether_var uint64 a = ( value2 ^ value1 ) * key;
    a ^= ( a >> 47 );
    _tether_var uint64 b = ( value1 ^ a ) * key;
    b ^= ( b >> 47 );
    b *= key;
    return b;
}

#endif // _TETHER_ARG_2

#if _TETHER_ARG_1

// ---------------------------------------------------------------------------------------------------------------------
// mix-in-place u32/u64

// U32 -> hashed U32
_tether_decl uint remixU32( _tether_arg1(uint) value, uniform const uint key = 0x85ebca6b )
{
    _tether_var uint r = value;

    r  = ( r ^ 61 ) ^ ( r >> 16 );
    r += ( r << 3 );
    r ^= ( r >> 4 );
    r *= key;
    r ^= ( r >> 15 );
    return r;
}

// U64 -> hashed U64
_tether_decl uint64 remixU64( _tether_arg1(uint64) value )
{
    _tether_var uint64 r = value;

    r ^= r >> 33;
    r *= 0x64dd81482cbd31d7UL;
    r ^= r >> 33;
    r *= 0xe36aa5c613612997UL;
    r ^= r >> 33;

    return r;
}

// ---------------------------------------------------------------------------------------------------------------------
// crush down 3 floats to single result

_tether_decl float mixdownF3( _tether_arg1(float3) value )
{
    _tether_var float3 p = frac( value * 0.3183099f + 0.1f ) * 17.0f;
    return frac( p.x * p.y * p.z * (p.x + p.y + p.z) );
}



#endif // _TETHER_ARG_1
